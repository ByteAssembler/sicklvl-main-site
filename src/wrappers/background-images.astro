---
import { prismaClient } from "src/global";
import { fileNameToBlobUrlPath } from "src/utils/file-manager";
import { getImageWithPreferredWidth } from "src/utils/minis";

let items = await prismaClient.portfolioItem.findMany({
    orderBy: {
        order: "asc",
    },
    select: {
        title: true,
        slug: true,
        thumbnail: {
            select: {
                id: true,
                image_variations: {
                    select: {
                        id: true,
                        file_name: true,
                        width: true,
                    },
                },
            },
        },
    },
});

const itemCountX = Math.ceil(Math.sqrt(items.length));
const itemCountY = Math.ceil(items.length / itemCountX);
---

<section id="container-grid" class="select-none">
    <div
        id="container-grid-box"
        data-item-count-x={itemCountX}
        data-item-count-y={itemCountY}
    >
        {
            items.map((item) => {
                const image = getImageWithPreferredWidth(
                    item.thumbnail.image_variations,
                );

                return (
                    <article
                        class="not-focused"
                        style={
                            image
                                ? `background-image: url(${fileNameToBlobUrlPath(image.file_name)})`
                                : ""
                        }
                    >
                        <a
                            class="h-full w-full flex items-center justify-center"
                            href={`/portfolio/${item.slug}`}
                        >
                            <div class="overflow-hidden px-[5%]">
                                <h2 class="drop-shadow font-august text-center text-[calc(1.5vw+2.5rem)] font-bold tracking-wide overflow-hidden transition-transform">
                                    {item.title}
                                </h2>
                            </div>
                        </a>
                    </article>
                );
            })
        }
    </div>
</section>

<style scoped define:vars={{ itemCountX, itemCountY }}>
    html,
    body,
    main,
    section {
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;

        touch-action: none;
    }

    #container-grid {
        overflow: hidden;
        background-color: black;
        box-sizing: border-box;
    }

    #container-grid-box {
        position: relative;

        height: min-content;
        width: min-content;

        padding: 25vh 25vw;

        display: grid;
        gap: 2.5vw 2vw;
        grid-template-columns: repeat(var(--itemCountX), 32vw);
        grid-template-rows: repeat(var(--itemCountY), 18vw);
    }

    @media (max-width: 768px) {
        #container-grid-box {
            padding: 0 50px;
            grid-template-columns: repeat(var(--itemCountX), calc(16vw * 5));
            grid-template-rows: repeat(var(--itemCountY), calc(9vw * 5));
        }
    }

    #container-grid article {
        background-position: center;
        background-repeat: no-repeat;
        background-size: 100% 100%;

        transition: all 300ms ease-out;

        filter: brightness(0.7);

        cursor: pointer;
    }

    #container-grid article.not-focused:hover {
        filter: brightness(0.9);
        background-size: 108% 108%;
    }

    #container-grid article.not-focused h2 {
        transition-duration: 200ms;
        transition-timing-function: cubic-bezier(0.6, 0.38, 0.38, 0.94);
        transform: translateY(100%);
    }

    #container-grid article.not-focused:hover h2 {
        transform: translateY(0%);
    }

    #container-grid article.focused {
        transition:
            filter 0ms linear,
            all 120ms ease-out !important;

        position: absolute;
        inset: 0;
        z-index: 20;

        background-size: cover;

        filter: brightness(0.85) blur(0.35rem);

        pointer-events: none;
        cursor: wait;
    }

    #container-grid article.focused h2 {
        display: none;
    }
</style>

<script>
    const section = document.getElementById("container-grid");
    const grid = document.getElementById("container-grid-box");
    const allArticlesInGrid = document.querySelectorAll(
        "#container-grid article",
    );

    function setup() {
        if (!section || !grid) return;

        let allowMove = true;
        let onXAixsFreezed = false;

        {
            for (const article of allArticlesInGrid) {
                const anchroTag = article.querySelector("a");

                if (!anchroTag) continue;

                article.addEventListener("click", async (e) => {
                    allowMove = false;

                    article.classList.add("focused");
                    article.classList.remove("not-focused");

                    // Body cancel pointer events
                    document.body.style.pointerEvents = "none";
                    document.body.style.cursor = "wait";
                });
            }
        }

        let sectionBounds = section.getBoundingClientRect();
        let gridBounds = grid.getBoundingClientRect();

        // Resize event handling with debouncing
        let resizeTimeout: ReturnType<typeof setTimeout> | undefined =
            undefined;

        function onResize() {
            if (section && grid) {
                sectionBounds = section.getBoundingClientRect();
                gridBounds = grid.getBoundingClientRect();
            }

            const mediaQuery = window.matchMedia("(max-width: 768px)");
            if (mediaQuery.matches) {
                // Set onXAixsFreezed to true if the grid height is smaller than the section height
                onXAixsFreezed = gridBounds.height < sectionBounds.height;
            } else {
                onXAixsFreezed = false;
            }
        }

        onResize();

        window.addEventListener("resize", () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(onResize, 100);
        });

        let offsetX = 0;
        let offsetY = 0;
        let isMouseMoving = false;

        // Mousemove handler
        function handleMouseMove(e: { clientX: number; clientY: number }) {
            if (!allowMove) return;

            const currentPositionX = e.clientX;
            const currentPositionY = e.clientY;

            // Calculate offsets based on mouse position
            offsetX =
                ((currentPositionX - sectionBounds.left) /
                    sectionBounds.width) *
                (gridBounds.width - sectionBounds.width);
            offsetY =
                ((currentPositionY - sectionBounds.top) /
                    sectionBounds.height) *
                (gridBounds.height - sectionBounds.height);

            // Set flag to indicate mouse is moving
            isMouseMoving = true;
        }

        // Touchmove handler for mobile
        function handleTouchMove(e: TouchEvent) {
            if (!allowMove) return;

            const touch = e.touches[0]; // Get the first touch point
            const currentPositionX = touch.clientX;
            const currentPositionY = touch.clientY;

            offsetX =
                ((currentPositionX - sectionBounds.left) /
                    sectionBounds.width) *
                (gridBounds.width - sectionBounds.width);
            offsetY =
                ((currentPositionY - sectionBounds.top) /
                    sectionBounds.height) *
                (gridBounds.height - sectionBounds.height);

            isMouseMoving = true;
        }

        let center = true;
        let centerInProcess = false;
        // Animation loop using requestAnimationFrame
        function animate() {
            if (grid && allowMove) {
                if (center && !centerInProcess) {
                    centerInProcess = true;
                    grid.style.transition = "none";

                    offsetX = (gridBounds.width - sectionBounds.width) / 2;
                    offsetY = (gridBounds.height - sectionBounds.height) / 2;
                    if (onXAixsFreezed)
                        offsetY =
                            (gridBounds.height - sectionBounds.height) / 2;
                    grid.style.transform = `translate(${-offsetX}px, ${-offsetY}px)`;

                    setTimeout(() => {
                        center = false;
                        grid.style.transition = "transform 180ms ease-out";

                        centerInProcess = false;
                    }, 180);
                } else if (isMouseMoving) {
                    if (onXAixsFreezed)
                        offsetY =
                            (gridBounds.height - sectionBounds.height) / 2;

                    grid.style.transform = `translate(${-offsetX}px, ${-offsetY}px)`;
                    isMouseMoving = false;
                }
                requestAnimationFrame(animate);
            }
        }

        requestAnimationFrame(animate);

        // Event listeners for mouse movement
        window.addEventListener("mousemove", handleMouseMove);

        // Event listeners for touch movement
        window.addEventListener("touchmove", handleTouchMove);
    }

    setup();
</script>
