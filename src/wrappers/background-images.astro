---
import { prismaClient } from "src/global";
import { fileNameToBlobUrlPath } from "src/utils/file-manager";
import { getImageWithPreferredWidth } from "src/utils/minis";

let items = await prismaClient.portfolioItem.findMany({
    orderBy: {
        order: "asc",
    },
    select: {
        title: true,
        slug: true,
        thumbnail: {
            select: {
                id: true,
                image_variations: {
                    select: {
                        id: true,
                        file_name: true,
                        width: true,
                    },
                },
            },
        },
    },
});

const itemCount = items.length;

const itemCountX = Math.ceil(Math.sqrt(itemCount));
const itemCountY = Math.ceil(itemCount / itemCountX);
const itemCountSmallX = Math.min(3, itemCountX);
const itemCountSmallY = Math.ceil(itemCount / itemCountSmallX);
---

<section id="container-grid" class="select-none">
    <div id="container-grid-box">
        {
            items.map((item) => {
                const image = getImageWithPreferredWidth(
                    item.thumbnail.image_variations,
                );

                return (
                    <article
                        class="not-focused"
                        style={
                            image
                                ? `background-image: url(${fileNameToBlobUrlPath(image.file_name)})`
                                : ""
                        }
                    >
                        <a
                            class="flex justify-center items-center w-full h-full"
                            href={`/portfolio/${item.slug}`}
                            draggable="false"
                        >
                            <div class="px-[5%] overflow-hidden">
                                <h2 class="drop-shadow font-august font-bold text-[calc(1.5vw+2.5rem)] text-center tracking-wide transition-transform overflow-hidden">
                                    {item.title}
                                </h2>
                            </div>
                        </a>
                    </article>
                );
            })
        }
    </div>
</section>

<style
    scoped
    define:vars={{
        itemCount,
        itemCountX,
        itemCountY,
        itemCountSmallX,
        itemCountSmallY,
    }}
>
    html,
    body,
    main,
    section {
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;

        touch-action: none;
    }

    #container-grid {
        overflow: hidden;
        background-color: black;
        box-sizing: border-box;
    }

    #container-grid-box {
        position: relative;

        height: min-content;
        width: min-content;

        padding: 25vh 25vw;

        display: grid;
        gap: 2.5vw 2vw;
        /*
        --itemCountX: round(up, sqrt(var(--itemCount)));
        --itemCountY: round(up, var(--itemCount) / var(--itemCountX));
        --itemCountSmallX: min(3, var(--itemCountX));
        --itemCountSmallY: round(up, var(--itemCount) / var(--itemCountSmallX));
        */
        grid-template-columns: repeat(var(--itemCountX), 40vw);
        grid-template-rows: repeat(var(--itemCountY), 22.5vw);
    }

    @media (max-width: 768px) {
        #container-grid-box {
            padding: 65px;
            padding: calc(65px + 40px);

            grid-template-columns: repeat(
                var(--itemCountSmallX),
                calc(16vw * 5)
            );
            grid-template-rows: repeat(var(--itemCountSmallY), calc(9vw * 5));
        }
    }

    #container-grid article {
        background-position: center;
        background-repeat: no-repeat;
        background-size: 100% 100%;

        transition: all 300ms ease-out;

        filter: brightness(0.7);

        cursor: pointer;
    }

    #container-grid article.not-focused:hover {
        filter: brightness(0.9);
        background-size: 108% 108%;
    }

    #container-grid article.not-focused h2 {
        transition-duration: 200ms;
        transition-timing-function: cubic-bezier(0.6, 0.38, 0.38, 0.94);
        transform: translateY(100%);
    }

    #container-grid article.not-focused:hover h2 {
        transform: translateY(0%);
    }

    #container-grid article.focused {
        transition:
            filter 0ms linear,
            all 120ms ease-out !important;

        position: absolute;
        inset: 0;
        z-index: 20;

        background-size: cover;

        filter: brightness(0.85) blur(0.35rem);

        pointer-events: none;
        cursor: wait;
    }

    #container-grid article.focused h2 {
        display: none;
    }
</style>

<script>
    // Variablen im Scope der Komponente definieren
    const section = document.getElementById("container-grid");
    const grid = document.getElementById("container-grid-box");
    const allArticlesInGrid = document.querySelectorAll(
        "#container-grid article",
    );

    let sectionBounds: DOMRect | null = null;
    let gridBounds: DOMRect | null = null;
    let offsetX = 0;
    let offsetY = 0;
    let allowMove = true; // Flag, um Bewegung zu erlauben/verbieten
    let isMouseMoving = false; // Flag, um unnötige Updates im rAF zu vermeiden
    let resizeTimeout: ReturnType<typeof setTimeout> | undefined = undefined;

    // === Kernfunktionen ===

    /**
     * Berechnet die Grenzen neu und zentriert das Grid im Container.
     * @param {boolean} useTransition - Ob eine sanfte Transition verwendet werden soll.
     */
    function centerGrid(useTransition = false) {
        if (!section || !grid) return;

        // Grenzen neu berechnen, da sie sich geändert haben könnten (Resize, Load)
        sectionBounds = section.getBoundingClientRect();
        gridBounds = grid.getBoundingClientRect();

        // Berechne die Ziel-Offsets für die Zentrierung
        // (halber Unterschied zwischen Grid-Größe und Sektions-Größe)
        const targetOffsetX = (gridBounds.width - sectionBounds.width) / 2;
        const targetOffsetY = (gridBounds.height - sectionBounds.height) / 2;

        // Aktuelle Offsets aktualisieren, damit die Mausbewegung relativ zur Mitte startet
        offsetX = targetOffsetX;
        offsetY = targetOffsetY;

        // Transition setzen oder entfernen
        const originalTransition = grid.style.transition;
        grid.style.transition = useTransition
            ? "transform 300ms ease-out"
            : "none";

        // Transformation anwenden
        grid.style.transform = `translate(${-offsetX}px, ${-offsetY}px)`;

        // Wichtig: Kurze Verzögerung (nächster Frame), bevor die Standard-Transition
        // für die Mausverfolgung wiederhergestellt wird, falls keine Transition
        // für die Zentrierung verwendet wurde. Sonst überschreibt die Maus-Transition
        // sofort den zentrierten Zustand.
        requestAnimationFrame(() => {
            if (!useTransition) {
                // Stelle die Standard-Mausverfolgungs-Transition wieder her
                grid.style.transition = "transform 180ms ease-out";
            }
            // Wenn useTransition=true war, läuft die 300ms Transition noch,
            // die nächste Mausbewegung setzt dann die 180ms Transition.
        });

        console.log("Grid centered."); // Debugging-Ausgabe
    }

    /**
     * Behandelt Mausbewegungen, berechnet neue Offsets.
     */
    function handleMouseMove(e: MouseEvent) {
        if (!allowMove || !sectionBounds || !gridBounds || !section) return;

        // Berechne Offset basierend auf Mausposition relativ zur Sektion
        offsetX =
            ((e.clientX - sectionBounds.left) / sectionBounds.width) *
            (gridBounds.width - sectionBounds.width);
        offsetY =
            ((e.clientY - sectionBounds.top) / sectionBounds.height) *
            (gridBounds.height - sectionBounds.height);

        isMouseMoving = true; // Markieren, dass sich die Maus bewegt hat
    }

    /**
     * Behandelt Touch-Bewegungen, berechnet neue Offsets.
     */
    function handleTouchMove(e: TouchEvent) {
        if (
            !allowMove ||
            !sectionBounds ||
            !gridBounds ||
            !section ||
            e.touches.length === 0
        )
            return;

        const touch = e.touches[0]; // Ersten Touchpunkt verwenden

        offsetX =
            ((touch.clientX - sectionBounds.left) / sectionBounds.width) *
            (gridBounds.width - sectionBounds.width);
        offsetY =
            ((touch.clientY - sectionBounds.top) / sectionBounds.height) *
            (gridBounds.height - sectionBounds.height);

        isMouseMoving = true; // Markieren, dass sich der Finger bewegt hat
    }

    /**
     * Animations-Loop: Wendet die Transformation basierend auf den Offsets an.
     */
    function animate() {
        if (grid && allowMove && isMouseMoving) {
            // Nur transformieren, wenn sich die Maus/Finger seit dem letzten Frame bewegt hat
            // Die Transition ist bereits via CSS oder centerGrid gesetzt
            grid.style.transform = `translate(${-offsetX}px, ${-offsetY}px)`;
            isMouseMoving = false; // Reset flag after applying
        }
        // Fordere den nächsten Frame an, um die Animation fortzusetzen
        requestAnimationFrame(animate);
    }

    /**
     * Behandelt Fenstergrößenänderungen (debounced).
     */
    function onResize() {
        if (section && grid) {
            // Grenzen neu berechnen und Grid zentrieren (mit Transition)
            centerGrid(true);
        }
    }

    /**
     * Initialisiert das Grid, setzt Event Listener und startet die Animation.
     */
    function initializeGrid() {
        if (!section || !grid) {
            console.error("Section or Grid not found!");
            return;
        }

        console.log("Initializing grid...");

        // Initiales Zentrieren (ohne Transition für sofortigen Effekt)
        // Wichtig: Sicherstellen, dass Layout berechnet wurde (passiert meist implizit, aber rAF kann helfen)
        requestAnimationFrame(() => {
            centerGrid(false);

            // Event Listener für Maus- und Touch-Bewegung hinzufügen
            window.addEventListener("mousemove", handleMouseMove);
            window.addEventListener("touchmove", handleTouchMove, {
                passive: true,
            }); // passive: true für bessere Scroll-Performance

            // Event Listener für Klicks auf Artikel (um Bewegung zu stoppen)
            allArticlesInGrid.forEach((article) => {
                article.addEventListener(
                    "click",
                    () => {
                        allowMove = false; // Bewegung stoppen
                        article.classList.add("focused");
                        article.classList.remove("not-focused");
                        document.body.style.pointerEvents = "none"; // Verhindert weitere Klicks während Übergang
                        document.body.style.cursor = "wait";
                        // Hinweis: Die Weiterleitung geschieht durch das <a> Tag
                    },
                    { capture: true },
                ); // Capture Phase, um sicherzustellen, dass es vor der Navigation feuert
            });

            // Startet die Animationsschleife nur einmal
            requestAnimationFrame(animate);
        });

        // Event Listener für Größenänderungen (debounced)
        window.addEventListener("resize", () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(onResize, 150); // Debounce-Zeit (150ms)
        });

        // Event Listener für 'pageshow' (wichtig für Back/Forward Cache)
        window.addEventListener("pageshow", (event) => {
            console.log("Pageshow event fired. Persisted:", event.persisted);
            // event.persisted ist true, wenn die Seite aus dem bfcache geladen wurde
            if (event.persisted) {
                console.log("Page loaded from bfcache. Re-centering grid.");
                // Bewegung wieder erlauben (falls sie durch Klick gestoppt wurde)
                allowMove = true;
                // Pointer-Events und Cursor auf Body zurücksetzen (falls gesetzt)
                document.body.style.pointerEvents = "auto";
                document.body.style.cursor = "default";
                // Ggf. 'focused' Klasse von Artikeln entfernen? Hängt vom gewünschten Verhalten ab.
                // document.querySelectorAll('#container-grid article.focused').forEach(el => el.classList.remove('focused'));

                // Grid neu zentrieren (ohne Transition für sofortigen Effekt)
                // Kurze Verzögerung kann helfen, falls das Layout noch nicht ganz bereit ist
                setTimeout(() => centerGrid(false), 50);
            }
        });
    }

    // Initialisierung starten, sobald das DOM bereit ist
    // "astro:page-load" ist oft zuverlässiger in Astro als DOMContentLoaded
    document.addEventListener("astro:page-load", initializeGrid);
    // Fallback für reine Client-Navigation oder wenn astro:page-load nicht passt
    // document.addEventListener("DOMContentLoaded", initializeGrid);
</script>
